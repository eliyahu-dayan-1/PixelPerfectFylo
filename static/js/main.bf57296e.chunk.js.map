{"version":3,"sources":["history.js","services/httpService.js","cmps/Sec1.jsx","cmps/Sec2.jsx","cmps/Sec3.jsx","pages/Home.jsx","cmps/NavBar.jsx","App.js","serviceWorker.js","store/reducers/UserReducer.js","store/store.js","index.js"],"names":["createBrowserHistory","Axios","create","withCredentials","Sec1","className","Sec2","Sec3","href","Home","React","Component","connect","state","NavBar","withRouter","App","component","path","Boolean","window","location","hostname","match","initialState","users","loggedInUser","rootReducer","combineReducers","user","action","type","filter","_id","userId","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mPACgBA,c,cCMJC,EAAMC,OAAO,CACrBC,iBAAiB,I,MCNd,SAASC,IACZ,OACI,6BAASC,UAAU,oBACf,yBAAKA,UAAU,wBACf,yBAAKA,UAAU,UAAf,gEACA,yBAAKA,UAAU,OAAf,gKACA,yBAAKA,UAAU,2CAAf,gBCNL,SAASC,IACZ,OACI,6BAASD,UAAU,oBAEf,yBAAKA,UAAU,QACX,yBAAKA,UAAU,6BACf,yBAAKA,UAAU,UAAf,+BACA,yBAAKA,UAAU,OAAf,wHAGJ,yBAAKA,UAAU,QACX,yBAAKA,UAAU,uBACf,yBAAKA,UAAU,UAAf,0BACA,yBAAKA,UAAU,OAAf,0IAGJ,yBAAKA,UAAU,QACX,yBAAKA,UAAU,wBACf,yBAAKA,UAAU,UAAf,2BACA,yBAAKA,UAAU,aAAf,gIAGJ,yBAAKA,UAAU,QACX,yBAAKA,UAAU,oBACf,yBAAKA,UAAU,UAAf,0BACA,yBAAKA,UAAU,OAAf,kJCzBT,SAASE,IACZ,OACI,6BAASF,UAAU,2BACf,yBAAKA,UAAU,wBACf,yBAAKA,UAAU,QACX,yBAAKA,UAAU,UAAf,qCAEA,yBAAKA,UAAU,OAAf,sHACA,yBAAKA,UAAU,OAAf,+HACA,uBAAGA,UAAU,OAAOG,KAAK,IACrB,oDACA,yBAAKH,UAAU,uB,ICL7BI,E,uKAIE,OACI,0BAAMJ,UAAU,kBACZ,kBAACD,EAAD,MACA,kBAACE,EAAD,MACA,kBAACC,EAAD,W,GARGG,IAAMC,WAuBVC,eATS,SAACC,GACrB,MAAO,KAKgB,GAGZD,CAA6CH,GC1BtDK,E,uKAEE,OACI,4BAAQT,UAAU,0CACd,yBAAKA,UAAU,sBACf,yBAAKA,UAAU,cACZ,uBAAGG,KAAK,IAAR,WACA,uBAAGA,KAAK,IAAR,QACA,uBAAGA,KAAK,IAAR,kB,GAREG,aAyBNC,eAXS,SAACC,GACrB,MAAO,KAKoB,GAKhBD,CAA6CG,YAAWD,ICbxDE,MAZf,WAEE,OACE,yBAAKX,UAAU,iBACb,kBAAC,EAAD,MACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOY,UAAWR,EAAMS,KAAK,SCCnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCfAC,EAAe,CACnBC,MAAO,GACPC,aAAc,M,oBCAVC,EAAcC,YAAgB,CAC5BC,KDED,WAAyD,IAApChB,EAAmC,uDAA3BW,EAAcM,EAAa,uDAAJ,GAEzD,OAAQA,EAAOC,MACb,IAAK,YACH,OAAO,2BACFlB,GADL,IAEEY,MAAOK,EAAOL,QAElB,IAAK,WAGH,OAAO,2BACFZ,GADL,IAEEa,aAAcI,EAAOD,OAEzB,IAAK,cACH,OAAO,2BACFhB,GADL,IAEEY,MAAOZ,EAAMY,MAAMO,QAAO,SAAAH,GAAI,OAAIA,EAAKI,MAAQH,EAAOI,YAE1D,QACE,OAAOrB,MCpBPsB,EAAmBf,OAAOgB,sCAAwCC,IAC3DC,EAAQC,YAAYZ,EAC7BQ,EAAiBK,YAAgBC,O,QCDrCC,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJM,SAASC,eAAe,SHmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.bf57296e.chunk.js","sourcesContent":["import { createBrowserHistory } from \"history\";\r\nconst history = createBrowserHistory();\r\n\r\nexport default history;","import history from '../history';\r\nimport Axios from 'axios';\r\n\r\nconst BASE_URL = process.env.NODE_ENV === 'production'\r\n    ? '/api/'\r\n    : '//localhost:3030/api/'\r\n    \r\nvar axios = Axios.create({\r\n    withCredentials: true\r\n});\r\n\r\nexport default {\r\n    get(endpoint, data){\r\n        return ajax(endpoint, 'GET', data)\r\n    },\r\n    post(endpoint, data){\r\n        \r\n        \r\n        return ajax(endpoint, 'POST', data)\r\n    },\r\n    put(endpoint, data){\r\n        return ajax(endpoint, 'PUT', data)\r\n    },\r\n    delete(endpoint, data){\r\n        return ajax(endpoint, 'DELETE', data)\r\n    }\r\n}\r\n\r\n\r\nasync function ajax(endpoint, method='get', data=null) {\r\n    try {\r\n        const res = await axios({\r\n            url: `${BASE_URL}${endpoint}`,\r\n            method,\r\n            data\r\n        })\r\n        return res.data;\r\n    } catch (err) {\r\n        console.log(`Had Issues ${method}ing to the backend, endpoint: ${endpoint}, with data: ${data}`);\r\n        console.dir(err);\r\n        if (err.response && err.response.status === 401) {\r\n          history.push('/login');\r\n        }\r\n        throw err;\r\n    }\r\n}","import React from 'react'\r\n\r\nexport function Sec1() {\r\n    return (\r\n        <section className=\"sec1 flex column\" >\r\n            <div className=\"pepolewithfile-icon\"></div>\r\n            <div className=\"header\"> All your files in one secure location, accessible anywhere.</div>\r\n            <div className=\"txt\"> Fylo stores all your most important files in one secure location. Access them wherever you need, share and collaborate with friends family, and co-workers.</div>\r\n            <div className=\"button flex align-center justify-center\">Get Started</div>\r\n        </section>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport function Sec2() {\r\n    return (\r\n        <section className=\"sec2 flex column\" >\r\n\r\n            <div className=\"desc\">\r\n                <div className=\"icon desktop-mobile-icon\"></div>\r\n                <div className=\"header\">Access your files, anywhere</div>\r\n                <div className=\"txt\">The ability to use a smartphone, tablet, or computer to access your account means your files follow you everywhere.</div>\r\n            </div>\r\n\r\n            <div className=\"desc\">\r\n                <div className=\"icon security-icon\"></div>\r\n                <div className=\"header\">Security you can trust</div>\r\n                <div className=\"txt\">2-factor authentication and user-controlled encryption are just a couple of the security features we allow to help secure your files.</div>\r\n            </div>\r\n\r\n            <div className=\"desc\">\r\n                <div className=\"icon real-time-icon\"></div>\r\n                <div className=\"header\">Real-time collaboration</div>\r\n                <div className=\"txt files\">Securely share files and folders with friends, family and colleagues for live collaboration. No email attachments required.</div>\r\n            </div>\r\n\r\n            <div className=\"desc\">\r\n                <div className=\"icon files-icon\"></div>\r\n                <div className=\"header\">Store any type of file</div>\r\n                <div className=\"txt\">\r\n                    Whether you're sharing holidays photos or work documents, Fylo has you covered allowing for all file types to be securely stored and shared.\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport function Sec3() {\r\n    return (\r\n        <section className=\"sec3 flex space-between\" >\r\n            <div className=\"pepole-messege-icon\"></div>\r\n            <div className=\"desc\">\r\n                <div className=\"header\">Stay productive,\r\nwherever you are</div>\r\n                <div className=\"txt\">Never let location be an issue when accessing your files. Fylo has you covered for all of your file storage needs.</div>\r\n                <div className=\"txt\">Securely share files and folders with friends, family and colleagues for live collaboration. No email attachments required.</div>\r\n                <a className=\"flex\" href=\"\">\r\n                    <div> See how Fylo works</div>\r\n                    <div className=\"arrow-blue-icon\"></div>\r\n                </a>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Route, Switch, Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux'\r\nimport { login, getUser } from '../store/actions/userActions.js'\r\nimport { Sec1 } from '../cmps/Sec1.jsx'\r\nimport { Sec2 } from '../cmps/Sec2.jsx'\r\nimport { Sec3 } from '../cmps/Sec3.jsx'\r\n\r\nclass Home extends React.Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <main className=\"home-container\">\r\n                <Sec1></Sec1>\r\n                <Sec2></Sec2>\r\n                <Sec3></Sec3>\r\n            </main>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home)","import React, { Component } from 'react'\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { connect } from 'react-redux'\r\n// import { getUser, update, loadUsers } from '../store/actions/userActions.js'\r\n\r\nclass NavBar extends Component {\r\n    render() {\r\n        return (\r\n            <header className=\"nav-content-wrapper flex space-between\">\r\n                <div className=\"logo align-center\"></div>\r\n                <nav className=\"links flex\">\r\n                   <a href=\"\">Sign In</a> \r\n                   <a href=\"\">Team</a> \r\n                   <a href=\"\">Features</a> \r\n                </nav>\r\n            </header>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        // loggedUser: state.user.loggedInUser \r\n\r\n    }\r\n}\r\n    const mapDispatchToProps = {\r\n        // setBoards\r\n\r\n    }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(NavBar))","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport Home from './pages/Home.jsx'\r\nimport NavBar from './cmps/NavBar.jsx'\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <NavBar />\r\n        <Switch>\r\n          <Route component={Home} path=\"/\" />\r\n        </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","// let localLoggedinUser = null;\r\n// if (sessionStorage.user) localLoggedinUser = JSON.parse(sessionStorage.user);\r\n\r\nconst initialState = {\r\n  users: [],\r\n  loggedInUser: null\r\n};\r\n\r\nexport function userReducer(state = initialState, action = {}) {\r\n \r\n  switch (action.type) {\r\n    case 'SET_USERS':\r\n      return {\r\n        ...state,\r\n        users: action.users\r\n      };\r\n    case 'SET_USER':\r\n     \r\n      \r\n      return {\r\n        ...state,\r\n        loggedInUser: action.user,\r\n      };\r\n    case 'USER_REMOVE':\r\n      return {\r\n        ...state,\r\n        users: state.users.filter(user => user._id !== action.userId)\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { userReducer } from './reducers/UserReducer'\r\n\r\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux'\r\nimport thunk from 'redux-thunk'\r\n\r\nconst rootReducer = combineReducers({\r\n        user: userReducer\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(rootReducer,\r\n    composeEnhancers(applyMiddleware(thunk))\r\n)\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/global.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { store } from './store/store.js';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}